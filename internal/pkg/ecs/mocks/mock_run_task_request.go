// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/ecs/run_task_request.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ecs "github.com/aws/copilot-cli/internal/pkg/aws/ecs"
	gomock "github.com/golang/mock/gomock"
)

// MockECSServiceDescriber is a mock of ECSServiceDescriber interface.
type MockECSServiceDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockECSServiceDescriberMockRecorder
}

// MockECSServiceDescriberMockRecorder is the mock recorder for MockECSServiceDescriber.
type MockECSServiceDescriberMockRecorder struct {
	mock *MockECSServiceDescriber
}

// NewMockECSServiceDescriber creates a new mock instance.
func NewMockECSServiceDescriber(ctrl *gomock.Controller) *MockECSServiceDescriber {
	mock := &MockECSServiceDescriber{ctrl: ctrl}
	mock.recorder = &MockECSServiceDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECSServiceDescriber) EXPECT() *MockECSServiceDescriberMockRecorder {
	return m.recorder
}

// NetworkConfiguration mocks base method.
func (m *MockECSServiceDescriber) NetworkConfiguration(cluster, serviceName string) (*ecs.NetworkConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConfiguration", cluster, serviceName)
	ret0, _ := ret[0].(*ecs.NetworkConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConfiguration indicates an expected call of NetworkConfiguration.
func (mr *MockECSServiceDescriberMockRecorder) NetworkConfiguration(cluster, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConfiguration", reflect.TypeOf((*MockECSServiceDescriber)(nil).NetworkConfiguration), cluster, serviceName)
}

// Service mocks base method.
func (m *MockECSServiceDescriber) Service(clusterName, serviceName string) (*ecs.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", clusterName, serviceName)
	ret0, _ := ret[0].(*ecs.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Service indicates an expected call of Service.
func (mr *MockECSServiceDescriberMockRecorder) Service(clusterName, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockECSServiceDescriber)(nil).Service), clusterName, serviceName)
}

// TaskDefinition mocks base method.
func (m *MockECSServiceDescriber) TaskDefinition(taskDefName string) (*ecs.TaskDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskDefinition", taskDefName)
	ret0, _ := ret[0].(*ecs.TaskDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskDefinition indicates an expected call of TaskDefinition.
func (mr *MockECSServiceDescriberMockRecorder) TaskDefinition(taskDefName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDefinition", reflect.TypeOf((*MockECSServiceDescriber)(nil).TaskDefinition), taskDefName)
}

// MockServiceDescriber is a mock of ServiceDescriber interface.
type MockServiceDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDescriberMockRecorder
}

// MockServiceDescriberMockRecorder is the mock recorder for MockServiceDescriber.
type MockServiceDescriberMockRecorder struct {
	mock *MockServiceDescriber
}

// NewMockServiceDescriber creates a new mock instance.
func NewMockServiceDescriber(ctrl *gomock.Controller) *MockServiceDescriber {
	mock := &MockServiceDescriber{ctrl: ctrl}
	mock.recorder = &MockServiceDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDescriber) EXPECT() *MockServiceDescriberMockRecorder {
	return m.recorder
}

// ClusterARN mocks base method.
func (m *MockServiceDescriber) ClusterARN(app, env string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterARN", app, env)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterARN indicates an expected call of ClusterARN.
func (mr *MockServiceDescriberMockRecorder) ClusterARN(app, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterARN", reflect.TypeOf((*MockServiceDescriber)(nil).ClusterARN), app, env)
}

// NetworkConfiguration mocks base method.
func (m *MockServiceDescriber) NetworkConfiguration(app, env, svc string) (*ecs.NetworkConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConfiguration", app, env, svc)
	ret0, _ := ret[0].(*ecs.NetworkConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConfiguration indicates an expected call of NetworkConfiguration.
func (mr *MockServiceDescriberMockRecorder) NetworkConfiguration(app, env, svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConfiguration", reflect.TypeOf((*MockServiceDescriber)(nil).NetworkConfiguration), app, env, svc)
}

// TaskDefinition mocks base method.
func (m *MockServiceDescriber) TaskDefinition(app, env, svc string) (*ecs.TaskDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskDefinition", app, env, svc)
	ret0, _ := ret[0].(*ecs.TaskDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskDefinition indicates an expected call of TaskDefinition.
func (mr *MockServiceDescriberMockRecorder) TaskDefinition(app, env, svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDefinition", reflect.TypeOf((*MockServiceDescriber)(nil).TaskDefinition), app, env, svc)
}

// MockJobDescriber is a mock of JobDescriber interface.
type MockJobDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockJobDescriberMockRecorder
}

// MockJobDescriberMockRecorder is the mock recorder for MockJobDescriber.
type MockJobDescriberMockRecorder struct {
	mock *MockJobDescriber
}

// NewMockJobDescriber creates a new mock instance.
func NewMockJobDescriber(ctrl *gomock.Controller) *MockJobDescriber {
	mock := &MockJobDescriber{ctrl: ctrl}
	mock.recorder = &MockJobDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobDescriber) EXPECT() *MockJobDescriberMockRecorder {
	return m.recorder
}

// ClusterARN mocks base method.
func (m *MockJobDescriber) ClusterARN(app, env string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterARN", app, env)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterARN indicates an expected call of ClusterARN.
func (mr *MockJobDescriberMockRecorder) ClusterARN(app, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterARN", reflect.TypeOf((*MockJobDescriber)(nil).ClusterARN), app, env)
}

// NetworkConfigurationForJob mocks base method.
func (m *MockJobDescriber) NetworkConfigurationForJob(app, env, job string) (*ecs.NetworkConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConfigurationForJob", app, env, job)
	ret0, _ := ret[0].(*ecs.NetworkConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConfigurationForJob indicates an expected call of NetworkConfigurationForJob.
func (mr *MockJobDescriberMockRecorder) NetworkConfigurationForJob(app, env, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConfigurationForJob", reflect.TypeOf((*MockJobDescriber)(nil).NetworkConfigurationForJob), app, env, job)
}

// TaskDefinition mocks base method.
func (m *MockJobDescriber) TaskDefinition(app, env, job string) (*ecs.TaskDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskDefinition", app, env, job)
	ret0, _ := ret[0].(*ecs.TaskDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskDefinition indicates an expected call of TaskDefinition.
func (mr *MockJobDescriberMockRecorder) TaskDefinition(app, env, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDefinition", reflect.TypeOf((*MockJobDescriber)(nil).TaskDefinition), app, env, job)
}
