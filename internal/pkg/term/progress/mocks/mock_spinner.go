// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/term/progress/spinner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockstartStopper is a mock of startStopper interface.
type MockstartStopper struct {
	ctrl     *gomock.Controller
	recorder *MockstartStopperMockRecorder
}

// MockstartStopperMockRecorder is the mock recorder for MockstartStopper.
type MockstartStopperMockRecorder struct {
	mock *MockstartStopper
}

// NewMockstartStopper creates a new mock instance.
func NewMockstartStopper(ctrl *gomock.Controller) *MockstartStopper {
	mock := &MockstartStopper{ctrl: ctrl}
	mock.recorder = &MockstartStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstartStopper) EXPECT() *MockstartStopperMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockstartStopper) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockstartStopperMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockstartStopper)(nil).Start))
}

// Stop mocks base method.
func (m *MockstartStopper) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockstartStopperMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockstartStopper)(nil).Stop))
}
